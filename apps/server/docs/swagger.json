{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Застосунок \"Подорожники\"",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of app \"Подорожники\""
  },
  "servers": [
    {
      "url": "https://plantains-app.onrender.com/api"
    },
    {
      "url": "https://project-m-7jdz.onrender.com/api"
    },
    {
      "url": "http://localhost:3000/api"
    }
  ],
  "tags": [
    {
      "name": "Подорожники",
      "description": "Operations about users."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Create a new user account with email and password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Tim Cook"
                  },
                  "email": {
                    "type": "string",
                    "example": "timcook.official@icloud.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "appleCompany1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in user",
        "operationId": "loginUser",
        "description": "Log in with email and password to get an authentication token",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "timcook.official@icloud.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "appleCompany1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh authentication token",
        "operationId": "refreshToken",
        "description": "Refresh the user's authentication token using the refresh token",
        "security": [],
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Cookies containing refreshToken and sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "refreshToken=your-refresh-tiken; sessionId=your-session-id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-2"
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out user",
        "operationId": "logoutUser",
        "description": "Log out and invalidate user's session",
        "security": [],
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/auth/request-reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request a password reset link",
        "operationId": "requestResetPassword",
        "description": "Request a password reset link to be sent to the user's email",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "timcook.official@icloud.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-3"
          },
          "400": {
            "$ref": "#/components/responses/400-2"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset the user's password",
        "operationId": "resetPassword",
        "description": "Reset the password using the provided token and new password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "password-reset-token"
                  },
                  "password": {
                    "type": "string",
                    "example": "newSecurePassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-4"
          },
          "400": {
            "$ref": "#/components/responses/400-3"
          },
          "401": {
            "$ref": "#/components/responses/401-3"
          },
          "404": {
            "description": "Token expired or user not found"
          }
        }
      }
    },
    "/auth/google/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth authorization URL",
        "operationId": "getGoogleOAuthUrl",
        "description": "Get the OAuth URL to redirect the user to Google login page for authentication.",
        "security": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-5"
          },
          "401": {
            "description": "Unauthorized. User is not authenticated."
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/google/confirm-oauth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Confirm Google OAuth authorization",
        "operationId": "confirmGoogleOAuth",
        "description": "Confirm Google OAuth authorization using the code obtained from Google OAuth process.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "4/0AVGzR1A4XCATv7Gcxl9HukHu1rJuRRm4oSMChpDWeH2e8R_tEAy3pM49T12AWzDk5tzUzA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-6"
          },
          "400": {
            "$ref": "#/components/responses/400-4"
          }
        }
      }
    },
    "/stories": {
      "get": {
        "tags": [
          "Stories"
        ],
        "summary": "Get list of stories",
        "operationId": "getStories",
        "description": "Fetch a list of stories with pagination, category filtering, and sorting.",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of stories per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "Європа",
                "Азія",
                "Америка",
                "Африка",
                "Пустелі",
                "Україна"
              ]
            },
            "description": "Category of stories to filter by"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "rate",
                "date"
              ]
            },
            "description": "Field to sort the stories by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Order to sort the stories (ascending or descending)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-7"
          },
          "400": {
            "description": "Invalid parameters in the request"
          }
        }
      },
      "post": {
        "tags": [
          "Stories"
        ],
        "summary": "Create a new story",
        "operationId": "createStory",
        "description": "Add a new story to the platform with image, title, article, category, and author information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "article",
                  "category"
                ],
                "properties": {
                  "img": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image for the story"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the story",
                    "minLength": 3,
                    "maxLength": 128,
                    "example": "Канада: краса національного парку Банф"
                  },
                  "article": {
                    "type": "string",
                    "description": "Content of the story",
                    "example": "Канада вразила своїми горами і озерами. Ми провели кілька днів у парку Банф, де прогулянки вели до смарагдових вод озера Луїз і льодовика Колумбія. Кожен маршрут відкривав нові краєвиди. Увечері ми сиділи біля багаття, а вночі бачили північне сяйво. Банф — це місце, де відчуваєш велич природи і тишу гір."
                  },
                  "category": {
                    "type": "string",
                    "description": "Category of the story",
                    "enum": [
                      "Європа",
                      "Азія",
                      "Америка",
                      "Африка",
                      "Пустелі",
                      "Україна"
                    ],
                    "example": "Америка"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201-2"
          },
          "400": {
            "$ref": "#/components/responses/400-5"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          }
        }
      }
    },
    "/stories/byauthor/{id}": {
      "get": {
        "tags": [
          "Stories"
        ],
        "summary": "Get list of stories by author",
        "operationId": "getStoriesByAuthor",
        "description": "Retrieve a list of stories by a specific author with pagination and sorting options.",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the author whose stories you want to fetch.",
              "example": "68cf2fef64ba8aed80b91ae0"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number for pagination.",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Number of items per page.",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "rate",
                "date"
              ],
              "default": "date",
              "description": "Field to sort by.",
              "example": "rate"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc",
              "description": "Order of sorting.",
              "example": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-8"
          },
          "404": {
            "$ref": "#/components/responses/404-2"
          }
        }
      }
    },
    "/stories/story/{id}": {
      "get": {
        "tags": [
          "Story"
        ],
        "summary": "Get a story by id",
        "operationId": "getStoryById",
        "description": "Retrieve a single story by author unique ID",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique ID of the story to be fetched",
            "schema": {
              "type": "string",
              "example": "68cf3738147f34b70f224b30"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-9"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          }
        }
      },
      "patch": {
        "tags": [
          "Stories"
        ],
        "summary": "Update a story",
        "description": "Updates an existing story. Only the user who created the story (`ownerId`) can edit it.\n",
        "operationId": "updateStory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the story to update",
            "schema": {
              "type": "string",
              "example": "66fb54e3a4c3f9410e2cba6b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The data to update the story",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "My Updated Journey"
                  },
                  "category": {
                    "type": "string",
                    "example": "travel"
                  },
                  "article": {
                    "type": "string",
                    "example": "Updated short description of the story"
                  },
                  "fullText": {
                    "type": "string",
                    "example": "Full updated story text with all the details"
                  },
                  "img": {
                    "type": "string",
                    "format": "binary",
                    "example": "https://res.cloudinary.com/demo/image/upload/v169523/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-9"
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          }
        }
      },
      "delete": {
        "tags": [
          "Stories"
        ],
        "summary": "Delete a story by id",
        "operationId": "deleteStory",
        "description": "Delete a story by id. Returns 204 when the story is successfully deleted.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the story to be deleted",
            "schema": {
              "type": "string",
              "example": "68cf0539207bbf808f009700"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Story successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/400-5"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          }
        }
      }
    },
    "/stories/authors": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get list of authors",
        "operationId": "getAuthors",
        "description": "Fetch a list of authors with pagination and sorting options.",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "The page number for pagination."
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "The number of authors to return per page."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name"
              ]
            },
            "description": "Field to sort authors by.",
            "example": "name"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "The sorting order: ascending (asc) or descending (desc).",
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-10"
          },
          "400": {
            "description": "Invalid parameters in the request."
          },
          "404": {
            "description": "No authors found."
          }
        }
      }
    },
    "/stories/authors/{id}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get author by ID",
        "operationId": "getAuthorById",
        "description": "Fetch author details by their unique ID.",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique ID of the author",
              "example": "68cb1a7465ec501c0ff95094"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-11"
          },
          "404": {
            "$ref": "#/components/responses/404-4"
          }
        }
      }
    },
    "/users/info": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get information about the authenticated user",
        "operationId": "getUserInfo",
        "description": "Fetches the information of the authenticated user (private route).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-12"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          }
        }
      }
    },
    "/users/saved-stories": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get saved stories of the authenticated user",
        "operationId": "getSavedStories",
        "description": "Retrieves a list of saved stories for the authenticated user with pagination and sorting options.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of stories per page",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "rate",
                "date"
              ],
              "example": "date"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Order of sorting",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-13"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          },
          "404": {
            "$ref": "#/components/responses/404-5"
          }
        }
      }
    },
    "/users/created-stories": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get created (published) stories of the authenticated user",
        "operationId": "getCreatedStories",
        "description": "Retrieves a list of created (published) stories for the authenticated user with pagination and sorting options.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of stories per page",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "rate",
                "date"
              ],
              "example": "date"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Order of sorting",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-13"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          },
          "404": {
            "$ref": "#/components/responses/404-5"
          }
        }
      }
    },
    "/users/save-story/{id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Save a story to the saved list",
        "operationId": "saveStory",
        "description": "Add the specified story to the saved list of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the story to save.",
            "schema": {
              "type": "string",
              "example": "68cd6707f1827a0dda37ef5e"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/201-3"
          },
          "400": {
            "$ref": "#/components/responses/400-5"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove a story from the saved list",
        "operationId": "removeSavedStory",
        "description": "Remove the specified story from the saved list of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the story to remove from the saved list.",
            "schema": {
              "type": "string",
              "example": "68cd6707f1827a0dda37ef5e"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Story successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/400-5"
          },
          "401": {
            "$ref": "#/components/responses/401-4"
          },
          "404": {
            "$ref": "#/components/responses/404-3"
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "operationId": "patchUserAvatar",
        "description": "Upload a new avatar image for the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file (JPG, PNG, WEBP or GIF), max 5MB."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-14"
          },
          "400": {
            "$ref": "#/components/responses/400-6"
          },
          "401": {
            "$ref": "#/components/responses/401-5"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "200": {
        "description": "Successfully logged in user",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully logged in an user!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "accessToken"
                  ],
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "SpYCvxEhNnhgPUTSyR8/52YSInHE3G8QChsdyJb2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "201": {
        "description": "Successfully registered a user",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Successfully registered a user!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "user"
                  ],
                  "properties": {
                    "user": {
                      "type": "object",
                      "required": [
                        "name",
                        "email"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Tim Cook"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "timcook.official@icloud.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"password\" length must be at least 6 characters long"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found / Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "User is not allowed to edit this story",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "You are not allowed to edit this story"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "413": {
        "description": "Payload Too Large (file > 5MB).",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 413
                },
                "message": {
                  "type": "string",
                  "example": "File too large"
                }
              }
            },
            "examples": {
              "tooLarge": {
                "value": {
                  "status": 413,
                  "message": "File too large"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Error: Failed to retrieve the Google OAuth URL.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Failed to retrieve Google OAuth URL, please try again later."
                }
              }
            }
          }
        }
      },
      "200-2": {
        "description": "Successfully logged in user",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully logged in an user!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "accessToken"
                  ],
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "DTYrCGc/qJ0QMe4DjgW10bHMWL1eyUYqFilX3yKe"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-2": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-3": {
        "description": "Reset password email has been successfully sent",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Reset password email has been successfully sent."
                },
                "data": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Empty object, no additional data",
                  "example": {}
                }
              }
            }
          }
        }
      },
      "400-2": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\\\"email\\\" with value \\\"*********\\\" fails to match the required pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$/"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-4": {
        "description": "Password has been successfully reset",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Password has been successfully reset."
                },
                "data": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Empty object, no additional data",
                  "example": {}
                }
              }
            }
          }
        }
      },
      "400-3": {
        "description": "Bad request error - Password length validation failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"password\" length must be at least 8 characters long"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-3": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "invalid signature"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-5": {
        "description": "Successfully retrieved Google OAuth URL",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully get Google OAuth url!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=1070117217803-1v8t1cjjrcnjmf97o4lrm0quq3eilbhb.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A4000%2Fgoogle-oauth"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-6": {
        "description": "Successfully logged in with Google",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully logged in an user with Google!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "wI5q26m48ZIQMvc2EKqYIuQa9XxxszXDixi8nBJt"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400-4": {
        "description": "Bad Request: Invalid authorization code or failed authentication",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "invalid_grant"
                }
              }
            }
          }
        }
      },
      "200-7": {
        "description": "Successfully found stories",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found stories!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "data",
                    "page",
                    "perPage",
                    "totalItems",
                    "totalPages",
                    "hasNextPage",
                    "hasPreviousPage"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/story"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "perPage": {
                      "type": "integer",
                      "example": 2
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 8
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 4
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "example": true
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "201-2": {
        "description": "Story successfully created!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Story successfully created!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "_id",
                    "title",
                    "category",
                    "ownerId"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Story ID",
                      "example": "68cf3738147f34b70f224b30"
                    },
                    "img": {
                      "type": "string",
                      "format": "uri",
                      "description": "Story image URL",
                      "example": "https://ftp.goit.study/img/travel-blog/68498236a100312bea07900e_31_11zon.webp"
                    },
                    "title": {
                      "type": "string",
                      "description": "Story title",
                      "example": "Канада: краса національного парку Банф"
                    },
                    "article": {
                      "type": "string",
                      "description": "Story content",
                      "example": "Канада вразила своїми горами і озерами. Ми провели кілька днів у парку Банф..."
                    },
                    "category": {
                      "type": "string",
                      "description": "Story category",
                      "example": "Америка"
                    },
                    "rate": {
                      "type": "integer",
                      "description": "Rating of the story",
                      "example": 0
                    },
                    "date": {
                      "type": "string",
                      "format": "date",
                      "description": "Publication date of the story",
                      "example": "2025-09-20"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of story creation",
                      "example": "2025-09-20T23:22:32.075Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the last update",
                      "example": "2025-09-20T23:22:32.075Z"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "Author ID",
                      "example": "68cf2fef64ba8aed80b91ae0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400-5": {
        "description": "Bad Request - Validation error or missing required fields",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"******\" is required"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-4": {
        "description": "Unauthorized - User is not authenticated or session is missing",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found / Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-8": {
        "description": "Successfully found stories!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found stories!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "data",
                    "page",
                    "perPage",
                    "totalItems",
                    "totalPages",
                    "hasNextPage",
                    "hasPreviousPage"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/story"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "perPage": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 1
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "example": false
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404-2": {
        "description": "Not Found - The specified author ID is invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "******************** not valid id / Stories not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-9": {
        "description": "Successfully found story!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found story!"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/components/schemas/story"
                }
              }
            }
          }
        }
      },
      "404-3": {
        "description": "Not Found - Story with the given ID does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Story not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-10": {
        "description": "Successfully found authors!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found authors!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "data",
                    "page",
                    "perPage",
                    "totalItems",
                    "totalPages",
                    "hasNextPage",
                    "hasPreviousPage"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/author"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "perPage": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 6
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 1
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "example": false
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-11": {
        "description": "Successfully found author",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found author!"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/components/schemas/author"
                }
              }
            }
          }
        }
      },
      "404-4": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "******************** not valid id / User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "200-12": {
        "description": "Successfully retrieved user information.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "User information found"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        }
      },
      "200-13": {
        "description": "Successfully retrieved saved stories.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "description": "HTTP status code of the response.",
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "description": "Response message indicating the success or failure of the request.",
                  "type": "string",
                  "example": "Successfully found saved stories"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "data",
                    "page",
                    "perPage",
                    "totalItems",
                    "totalPages",
                    "hasNextPage",
                    "hasPreviousPage"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "$ref": "#/components/schemas/story"
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number in the paginated response.",
                      "example": 1
                    },
                    "perPage": {
                      "type": "integer",
                      "description": "Number of stories returned per page.",
                      "example": 4
                    },
                    "totalItems": {
                      "type": "integer",
                      "description": "Total number of saved stories for the user.",
                      "example": 5
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total number of pages of stories (calculated from totalItems and perPage).",
                      "example": 2
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "description": "Indicates if there is a next page available.",
                      "example": true
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "description": "Indicates if there is a previous page available.",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404-5": {
        "description": "Stories not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "description": "HTTP status code of the response.",
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "description": "Response message indicating the error.",
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "description": "Error message detailing the reason for the failure.",
                      "type": "string",
                      "example": "Stories not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "201-3": {
        "description": "Successfully saved article.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "description": "HTTP status code of the response.",
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "description": "Response message indicating the success of the operation.",
                  "type": "string",
                  "example": "Successfully saved article"
                },
                "data": {
                  "type": "object",
                  "description": "Additional data related to the operation (if any).",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "200-14": {
        "description": "Avatar updated successfully.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "user"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Avatar updated!"
                },
                "user": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "examples": {
              "success": {
                "value": {
                  "status": 200,
                  "message": "Avatar updated!",
                  "user": {
                    "_id": "66f4b0c0b1c9a0f2c7d2a111",
                    "name": "Alice",
                    "email": "alice@example.com",
                    "password": "12345678",
                    "avatar": "https://res.cloudinary.com/.../avatars/img.jpg",
                    "bio": "",
                    "onboardingCompleted": false,
                    "savedStories": [],
                    "settings": {
                      "darkMode": false
                    },
                    "socialLinks": {
                      "twitter": "",
                      "facebook": "",
                      "instagram": ""
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400-6": {
        "description": "Bad Request (missing file or unsupported type).",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Avatar file is required"
                }
              }
            },
            "examples": {
              "noFile": {
                "value": {
                  "status": 400,
                  "message": "Avatar file is required"
                }
              },
              "badType": {
                "value": {
                  "status": 400,
                  "message": "Unsupported file type (only JPG, PNG, WEBP, GIF)"
                }
              }
            }
          }
        }
      },
      "401-5": {
        "description": "Unauthorized.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            },
            "examples": {
              "unauth": {
                "value": {
                  "status": 401,
                  "message": "Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "story": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "owner"
        ],
        "properties": {
          "_id": {
            "description": "Story ID",
            "type": "string",
            "example": "68498236a100312bea07900e"
          },
          "img": {
            "description": "Story image URL",
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/travel-blog/68498236a100312bea07900e_31_11zon.webp"
          },
          "title": {
            "description": "Title of the story",
            "type": "string",
            "example": "Канада: краса національного парку Банф"
          },
          "article": {
            "description": "Content of the story",
            "type": "string",
            "example": "Канада вразила своїми горами і озерами. Ми провели кілька днів у парку Банф..."
          },
          "fullText": {
            "description": "Content of the story",
            "type": "string",
            "example": "Канада вразила своїми горами і озерами. Ми провели кілька днів у парку Банф..."
          },
          "category": {
            "description": "Story category",
            "type": "string",
            "enum": [
              "Європа",
              "Азія",
              "Америка",
              "Африка",
              "Пустелі",
              "Україна"
            ],
            "example": "Америка"
          },
          "rate": {
            "description": "Rating of the story",
            "type": "integer",
            "example": 45
          },
          "date": {
            "description": "Date of publication",
            "type": "string",
            "format": "date",
            "example": "2025-06-17"
          },
          "owner": {
            "description": "Author of the story",
            "type": "object",
            "required": [
              "_id",
              "name",
              "avatar",
              "bio"
            ],
            "properties": {
              "_id": {
                "description": "Author ID",
                "type": "string",
                "example": "68cf2fef64ba8aed80b91ae0"
              },
              "name": {
                "description": "Author's name",
                "type": "string",
                "example": "Tim Cook"
              },
              "avatar": {
                "description": "Author's avatar image URL",
                "type": "string",
                "format": "uri",
                "example": "https://res.cloudinary.com/dbmy1ukhf/image/upload/q_auto,f_auto/v1758134510/Placeholder_Image.png"
              },
              "bio": {
                "description": "Author's info",
                "type": "string",
                "example": "Traveler, photographer, and storyteller."
              }
            }
          }
        }
      },
      "author": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "bio"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Author ID",
            "example": "68cb1a7465ec501c0ff95094"
          },
          "name": {
            "type": "string",
            "description": "Name of the author",
            "example": "Tim Cook"
          },
          "bio": {
            "description": "Author's info",
            "type": "string",
            "example": "Traveler, photographer, and storyteller."
          },
          "avatar": {
            "type": "string",
            "description": "URL to the avatar image",
            "example": "https://res.cloudinary.com/dbmy1ukhf/image/upload/q_auto,f_auto/v1758134510/Placeholder_Image.png"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password",
          "bio"
        ],
        "properties": {
          "_id": {
            "description": "User identifier",
            "type": "string",
            "example": "68cb1a7465ec501c0ff95094"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Tim Cook"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "timcook.official@icloud.com"
          },
          "password": {
            "description": "User's phone password",
            "type": "string",
            "example": "12345678"
          },
          "bio": {
            "description": "User's biography",
            "type": "string",
            "example": "CEO of Apple, passionate about technology and innovation."
          },
          "avatar": {
            "description": "Link to the user's avatar",
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/dbmy1ukhf/image/upload/q_auto,f_auto/v1758134510/Placeholder_Image.png"
          },
          "onboardingCompleted": {
            "description": "Indicates whether the user has completed onboarding",
            "type": "boolean",
            "example": true
          },
          "savedStories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of saved stories",
            "example": [
              "68cbb1bc6ec9142c8bc37470",
              "68cd96e3e9fd23bcef3b066d",
              "68498236a100312bea078ff3",
              "68498236a100312bea079000",
              "68cd6707f1827a0dda37ef5e"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {
              "darkMode": {
                "type": "boolean",
                "description": "Indicates whether dark mode is enabled.",
                "example": false
              }
            }
          },
          "socialLinks": {
            "type": "object",
            "properties": {
              "twitter": {
                "type": "string",
                "description": "Twitter profile link",
                "example": ""
              },
              "facebook": {
                "type": "string",
                "description": "Facebook profile link",
                "example": ""
              },
              "instagram": {
                "type": "string",
                "description": "Instagram profile link",
                "example": ""
              }
            }
          }
        }
      }
    }
  }
}